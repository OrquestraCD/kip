/*
Copyright 2019 Elotl Inc.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/elotl/cloud-instance-provider/pkg/apis/kip/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCells implements CellInterface
type FakeCells struct {
	Fake *FakeKiyotV1beta1
}

var cellsResource = schema.GroupVersionResource{Group: "kiyot.elotl.co", Version: "v1beta1", Resource: "cells"}

var cellsKind = schema.GroupVersionKind{Group: "kiyot.elotl.co", Version: "v1beta1", Kind: "Cell"}

// Get takes name of the cell, and returns the corresponding cell object, and an error if there is any.
func (c *FakeCells) Get(name string, options v1.GetOptions) (result *v1beta1.Cell, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(cellsResource, name), &v1beta1.Cell{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Cell), err
}

// List takes label and field selectors, and returns the list of Cells that match those selectors.
func (c *FakeCells) List(opts v1.ListOptions) (result *v1beta1.CellList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(cellsResource, cellsKind, opts), &v1beta1.CellList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.CellList{ListMeta: obj.(*v1beta1.CellList).ListMeta}
	for _, item := range obj.(*v1beta1.CellList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested cells.
func (c *FakeCells) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(cellsResource, opts))
}

// Create takes the representation of a cell and creates it.  Returns the server's representation of the cell, and an error, if there is any.
func (c *FakeCells) Create(cell *v1beta1.Cell) (result *v1beta1.Cell, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(cellsResource, cell), &v1beta1.Cell{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Cell), err
}

// Update takes the representation of a cell and updates it. Returns the server's representation of the cell, and an error, if there is any.
func (c *FakeCells) Update(cell *v1beta1.Cell) (result *v1beta1.Cell, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(cellsResource, cell), &v1beta1.Cell{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Cell), err
}

// Delete takes name of the cell and deletes it. Returns an error if one occurs.
func (c *FakeCells) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(cellsResource, name), &v1beta1.Cell{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCells) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(cellsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1beta1.CellList{})
	return err
}

// Patch applies the patch and returns the patched cell.
func (c *FakeCells) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.Cell, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(cellsResource, name, pt, data, subresources...), &v1beta1.Cell{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Cell), err
}
