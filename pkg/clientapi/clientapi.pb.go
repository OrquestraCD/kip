// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clientapi.proto

package clientapi

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateRequest struct {
	Manifest             []byte   `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{0}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetManifest() []byte {
	if m != nil {
		return m.Manifest
	}
	return nil
}

type UpdateRequest struct {
	Manifest             []byte   `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{1}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetManifest() []byte {
	if m != nil {
		return m.Manifest
	}
	return nil
}

type GetRequest struct {
	Kind                 []byte   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name                 []byte   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{2}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetKind() []byte {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *GetRequest) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type DeleteRequest struct {
	Kind                 []byte   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name                 []byte   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cascade              bool     `protobuf:"varint,3,opt,name=cascade,proto3" json:"cascade,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{3}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetKind() []byte {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *DeleteRequest) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteRequest) GetCascade() bool {
	if m != nil {
		return m.Cascade
	}
	return false
}

type DumpRequest struct {
	Kind                 []byte   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DumpRequest) Reset()         { *m = DumpRequest{} }
func (m *DumpRequest) String() string { return proto.CompactTextString(m) }
func (*DumpRequest) ProtoMessage()    {}
func (*DumpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{4}
}

func (m *DumpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DumpRequest.Unmarshal(m, b)
}
func (m *DumpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DumpRequest.Marshal(b, m, deterministic)
}
func (m *DumpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpRequest.Merge(m, src)
}
func (m *DumpRequest) XXX_Size() int {
	return xxx_messageInfo_DumpRequest.Size(m)
}
func (m *DumpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DumpRequest proto.InternalMessageInfo

func (m *DumpRequest) GetKind() []byte {
	if m != nil {
		return m.Kind
	}
	return nil
}

type APIReply struct {
	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Body   []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// Warnings are printed by the client to stderr
	Warning              []byte   `protobuf:"bytes,3,opt,name=warning,proto3" json:"warning,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIReply) Reset()         { *m = APIReply{} }
func (m *APIReply) String() string { return proto.CompactTextString(m) }
func (*APIReply) ProtoMessage()    {}
func (*APIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{5}
}

func (m *APIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_APIReply.Unmarshal(m, b)
}
func (m *APIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_APIReply.Marshal(b, m, deterministic)
}
func (m *APIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIReply.Merge(m, src)
}
func (m *APIReply) XXX_Size() int {
	return xxx_messageInfo_APIReply.Size(m)
}
func (m *APIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_APIReply.DiscardUnknown(m)
}

var xxx_messageInfo_APIReply proto.InternalMessageInfo

func (m *APIReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *APIReply) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *APIReply) GetWarning() []byte {
	if m != nil {
		return m.Warning
	}
	return nil
}

type VersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{6}
}

func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRequest.Unmarshal(m, b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
}
func (m *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(m, src)
}
func (m *VersionRequest) XXX_Size() int {
	return xxx_messageInfo_VersionRequest.Size(m)
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

type VersionReply struct {
	VersionInfo          []byte   `protobuf:"bytes,1,opt,name=versionInfo,proto3" json:"versionInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionReply) Reset()         { *m = VersionReply{} }
func (m *VersionReply) String() string { return proto.CompactTextString(m) }
func (*VersionReply) ProtoMessage()    {}
func (*VersionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{7}
}

func (m *VersionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionReply.Unmarshal(m, b)
}
func (m *VersionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionReply.Marshal(b, m, deterministic)
}
func (m *VersionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionReply.Merge(m, src)
}
func (m *VersionReply) XXX_Size() int {
	return xxx_messageInfo_VersionReply.Size(m)
}
func (m *VersionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionReply.DiscardUnknown(m)
}

var xxx_messageInfo_VersionReply proto.InternalMessageInfo

func (m *VersionReply) GetVersionInfo() []byte {
	if m != nil {
		return m.VersionInfo
	}
	return nil
}

type IsLeaderRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsLeaderRequest) Reset()         { *m = IsLeaderRequest{} }
func (m *IsLeaderRequest) String() string { return proto.CompactTextString(m) }
func (*IsLeaderRequest) ProtoMessage()    {}
func (*IsLeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{8}
}

func (m *IsLeaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsLeaderRequest.Unmarshal(m, b)
}
func (m *IsLeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsLeaderRequest.Marshal(b, m, deterministic)
}
func (m *IsLeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsLeaderRequest.Merge(m, src)
}
func (m *IsLeaderRequest) XXX_Size() int {
	return xxx_messageInfo_IsLeaderRequest.Size(m)
}
func (m *IsLeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsLeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsLeaderRequest proto.InternalMessageInfo

type IsLeaderReply struct {
	IsLeader             bool     `protobuf:"varint,1,opt,name=isLeader,proto3" json:"isLeader,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsLeaderReply) Reset()         { *m = IsLeaderReply{} }
func (m *IsLeaderReply) String() string { return proto.CompactTextString(m) }
func (*IsLeaderReply) ProtoMessage()    {}
func (*IsLeaderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{9}
}

func (m *IsLeaderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsLeaderReply.Unmarshal(m, b)
}
func (m *IsLeaderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsLeaderReply.Marshal(b, m, deterministic)
}
func (m *IsLeaderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsLeaderReply.Merge(m, src)
}
func (m *IsLeaderReply) XXX_Size() int {
	return xxx_messageInfo_IsLeaderReply.Size(m)
}
func (m *IsLeaderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IsLeaderReply.DiscardUnknown(m)
}

var xxx_messageInfo_IsLeaderReply proto.InternalMessageInfo

func (m *IsLeaderReply) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

type LogsRequest struct {
	ResourceName         string   `protobuf:"bytes,1,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ItemName             string   `protobuf:"bytes,2,opt,name=itemName,proto3" json:"itemName,omitempty"`
	Lines                int32    `protobuf:"varint,3,opt,name=lines,proto3" json:"lines,omitempty"`
	Limitbytes           int32    `protobuf:"varint,4,opt,name=limitbytes,proto3" json:"limitbytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsRequest) Reset()         { *m = LogsRequest{} }
func (m *LogsRequest) String() string { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()    {}
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{10}
}

func (m *LogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogsRequest.Unmarshal(m, b)
}
func (m *LogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogsRequest.Marshal(b, m, deterministic)
}
func (m *LogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsRequest.Merge(m, src)
}
func (m *LogsRequest) XXX_Size() int {
	return xxx_messageInfo_LogsRequest.Size(m)
}
func (m *LogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogsRequest proto.InternalMessageInfo

func (m *LogsRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *LogsRequest) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *LogsRequest) GetLines() int32 {
	if m != nil {
		return m.Lines
	}
	return 0
}

func (m *LogsRequest) GetLimitbytes() int32 {
	if m != nil {
		return m.Limitbytes
	}
	return 0
}

type DeployRequest struct {
	ResourceName         string   `protobuf:"bytes,1,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ItemName             string   `protobuf:"bytes,2,opt,name=itemName,proto3" json:"itemName,omitempty"`
	PackageData          []byte   `protobuf:"bytes,3,opt,name=packageData,proto3" json:"packageData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployRequest) Reset()         { *m = DeployRequest{} }
func (m *DeployRequest) String() string { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()    {}
func (*DeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{11}
}

func (m *DeployRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployRequest.Unmarshal(m, b)
}
func (m *DeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployRequest.Marshal(b, m, deterministic)
}
func (m *DeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployRequest.Merge(m, src)
}
func (m *DeployRequest) XXX_Size() int {
	return xxx_messageInfo_DeployRequest.Size(m)
}
func (m *DeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployRequest proto.InternalMessageInfo

func (m *DeployRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *DeployRequest) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *DeployRequest) GetPackageData() []byte {
	if m != nil {
		return m.PackageData
	}
	return nil
}

type StreamLogsRequest struct {
	Pod                  string   `protobuf:"bytes,1,opt,name=Pod,proto3" json:"Pod,omitempty"`
	Unit                 string   `protobuf:"bytes,2,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Metadata             bool     `protobuf:"varint,3,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamLogsRequest) Reset()         { *m = StreamLogsRequest{} }
func (m *StreamLogsRequest) String() string { return proto.CompactTextString(m) }
func (*StreamLogsRequest) ProtoMessage()    {}
func (*StreamLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{12}
}

func (m *StreamLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamLogsRequest.Unmarshal(m, b)
}
func (m *StreamLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamLogsRequest.Marshal(b, m, deterministic)
}
func (m *StreamLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamLogsRequest.Merge(m, src)
}
func (m *StreamLogsRequest) XXX_Size() int {
	return xxx_messageInfo_StreamLogsRequest.Size(m)
}
func (m *StreamLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamLogsRequest proto.InternalMessageInfo

func (m *StreamLogsRequest) GetPod() string {
	if m != nil {
		return m.Pod
	}
	return ""
}

func (m *StreamLogsRequest) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *StreamLogsRequest) GetMetadata() bool {
	if m != nil {
		return m.Metadata
	}
	return false
}

type ConsoleStreamMsg struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsoleStreamMsg) Reset()         { *m = ConsoleStreamMsg{} }
func (m *ConsoleStreamMsg) String() string { return proto.CompactTextString(m) }
func (*ConsoleStreamMsg) ProtoMessage()    {}
func (*ConsoleStreamMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{13}
}

func (m *ConsoleStreamMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsoleStreamMsg.Unmarshal(m, b)
}
func (m *ConsoleStreamMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsoleStreamMsg.Marshal(b, m, deterministic)
}
func (m *ConsoleStreamMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsoleStreamMsg.Merge(m, src)
}
func (m *ConsoleStreamMsg) XXX_Size() int {
	return xxx_messageInfo_ConsoleStreamMsg.Size(m)
}
func (m *ConsoleStreamMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsoleStreamMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConsoleStreamMsg proto.InternalMessageInfo

func (m *ConsoleStreamMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type StreamMsg struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Error                []byte   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamMsg) Reset()         { *m = StreamMsg{} }
func (m *StreamMsg) String() string { return proto.CompactTextString(m) }
func (*StreamMsg) ProtoMessage()    {}
func (*StreamMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c811cce3b5e496, []int{14}
}

func (m *StreamMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamMsg.Unmarshal(m, b)
}
func (m *StreamMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamMsg.Marshal(b, m, deterministic)
}
func (m *StreamMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMsg.Merge(m, src)
}
func (m *StreamMsg) XXX_Size() int {
	return xxx_messageInfo_StreamMsg.Size(m)
}
func (m *StreamMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMsg proto.InternalMessageInfo

func (m *StreamMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StreamMsg) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*GetRequest)(nil), "GetRequest")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DumpRequest)(nil), "DumpRequest")
	proto.RegisterType((*APIReply)(nil), "APIReply")
	proto.RegisterType((*VersionRequest)(nil), "VersionRequest")
	proto.RegisterType((*VersionReply)(nil), "VersionReply")
	proto.RegisterType((*IsLeaderRequest)(nil), "IsLeaderRequest")
	proto.RegisterType((*IsLeaderReply)(nil), "IsLeaderReply")
	proto.RegisterType((*LogsRequest)(nil), "LogsRequest")
	proto.RegisterType((*DeployRequest)(nil), "DeployRequest")
	proto.RegisterType((*StreamLogsRequest)(nil), "StreamLogsRequest")
	proto.RegisterType((*ConsoleStreamMsg)(nil), "ConsoleStreamMsg")
	proto.RegisterType((*StreamMsg)(nil), "StreamMsg")
}

func init() { proto.RegisterFile("clientapi.proto", fileDescriptor_76c811cce3b5e496) }

var fileDescriptor_76c811cce3b5e496 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdb, 0x4e, 0xdb, 0x4c,
	0x18, 0xc4, 0x7f, 0x0e, 0x38, 0x5f, 0x0e, 0x84, 0xd5, 0xaf, 0x2a, 0xca, 0x45, 0x1b, 0x56, 0x94,
	0x46, 0x42, 0x5a, 0x45, 0x3d, 0x3c, 0x00, 0x02, 0x84, 0x90, 0x00, 0x51, 0x57, 0xf4, 0x7e, 0xb1,
	0x3f, 0xd2, 0x15, 0xb6, 0xd7, 0x78, 0x37, 0x6d, 0x73, 0xdd, 0x07, 0xee, 0x2b, 0x54, 0xbb, 0x3e,
	0xc4, 0x5b, 0xa4, 0x88, 0x8b, 0xde, 0xed, 0x4c, 0xc6, 0xdf, 0xec, 0x61, 0x26, 0xb0, 0x17, 0xc6,
	0x02, 0x53, 0xcd, 0x33, 0xc1, 0xb2, 0x5c, 0x6a, 0x49, 0x8f, 0x61, 0x78, 0x9a, 0x23, 0xd7, 0x18,
	0xe0, 0xd3, 0x0a, 0x95, 0x26, 0x53, 0xf0, 0x13, 0x9e, 0x8a, 0x07, 0x54, 0x7a, 0xe2, 0xcd, 0xbc,
	0xf9, 0x20, 0xa8, 0xb1, 0x11, 0xdf, 0x65, 0xd1, 0x0b, 0xc5, 0x1f, 0x01, 0x2e, 0x50, 0x57, 0x4a,
	0x02, 0xed, 0x47, 0x91, 0x46, 0xa5, 0xca, 0xae, 0x0d, 0x97, 0xf2, 0x04, 0x27, 0xff, 0x15, 0x9c,
	0x59, 0xd3, 0xcf, 0x30, 0x3c, 0xc3, 0x18, 0x37, 0x16, 0x2f, 0xfc, 0x90, 0x4c, 0x60, 0x37, 0xe4,
	0x2a, 0xe4, 0x11, 0x4e, 0x5a, 0x33, 0x6f, 0xee, 0x07, 0x15, 0xa4, 0x07, 0xd0, 0x3f, 0x5b, 0x25,
	0xd9, 0x96, 0x81, 0xf4, 0x16, 0xfc, 0x93, 0xdb, 0xcb, 0x00, 0xb3, 0x78, 0x4d, 0x5e, 0x41, 0x57,
	0x69, 0xae, 0x57, 0xca, 0x2a, 0x3a, 0x41, 0x89, 0xcc, 0x77, 0xf7, 0x32, 0x5a, 0x57, 0xa6, 0x66,
	0x6d, 0x4c, 0x7f, 0xf0, 0x3c, 0x15, 0xe9, 0xd2, 0x9a, 0x0e, 0x82, 0x0a, 0xd2, 0x31, 0x8c, 0xbe,
	0x62, 0xae, 0x84, 0x4c, 0x4b, 0x5f, 0xba, 0x80, 0x41, 0xcd, 0x18, 0x9f, 0x19, 0xf4, 0xbf, 0x17,
	0xf8, 0x32, 0x7d, 0x90, 0xe5, 0x76, 0x9a, 0x14, 0xdd, 0x87, 0xbd, 0x4b, 0x75, 0x85, 0x3c, 0xc2,
	0xbc, 0x1a, 0x72, 0x0c, 0xc3, 0x0d, 0x65, 0xa6, 0x4c, 0xc1, 0x17, 0x25, 0x61, 0x47, 0xf8, 0x41,
	0x8d, 0xe9, 0x2f, 0x0f, 0xfa, 0x57, 0x72, 0xa9, 0xaa, 0x93, 0x53, 0x18, 0xe4, 0xa8, 0xe4, 0x2a,
	0x0f, 0xf1, 0xc6, 0x5c, 0x9f, 0xd1, 0xf7, 0x02, 0x87, 0xb3, 0xf3, 0x34, 0x26, 0x37, 0xd5, 0xf5,
	0xf6, 0x82, 0x1a, 0x93, 0xff, 0xa1, 0x13, 0x8b, 0x14, 0x95, 0x3d, 0x6b, 0x27, 0x28, 0x00, 0x79,
	0x0d, 0x10, 0x8b, 0x44, 0xe8, 0xfb, 0xb5, 0x46, 0x35, 0x69, 0xdb, 0x9f, 0x1a, 0x0c, 0x7d, 0x32,
	0x2f, 0x9a, 0xc5, 0x72, 0xfd, 0xaf, 0xb6, 0x31, 0x83, 0x7e, 0xc6, 0xc3, 0x47, 0xbe, 0xc4, 0x33,
	0xae, 0x79, 0x79, 0xf1, 0x4d, 0x8a, 0xde, 0xc1, 0xfe, 0x17, 0x9d, 0x23, 0x4f, 0x9a, 0xa7, 0x1f,
	0x43, 0xeb, 0x56, 0x46, 0xa5, 0x9b, 0x59, 0x9a, 0x17, 0xbd, 0x4b, 0x85, 0x2e, 0x0d, 0xec, 0xda,
	0x18, 0x5f, 0xa3, 0xe6, 0x51, 0x35, 0xd9, 0x0f, 0x6a, 0x4c, 0x8f, 0x60, 0x7c, 0x2a, 0x53, 0x25,
	0x63, 0x2c, 0xa6, 0x5f, 0xab, 0xa5, 0x99, 0x61, 0x77, 0x51, 0xa6, 0xc9, 0xda, 0x7f, 0x82, 0xde,
	0x56, 0x81, 0xb9, 0xc8, 0xf3, 0x3c, 0x97, 0x79, 0x99, 0xa5, 0x02, 0xbc, 0xff, 0xdd, 0x82, 0xce,
	0xb5, 0x88, 0x33, 0x4e, 0x98, 0xad, 0x4e, 0x99, 0x16, 0xb2, 0xc7, 0xdc, 0x24, 0x4d, 0x87, 0xac,
	0x19, 0x24, 0xba, 0x43, 0x18, 0xf8, 0x55, 0x2a, 0xc8, 0x98, 0xfd, 0x95, 0x99, 0xe9, 0x88, 0x39,
	0x91, 0xa1, 0x3b, 0xe4, 0x2d, 0x74, 0x8b, 0xd2, 0x93, 0x11, 0x73, 0xda, 0x3f, 0xed, 0xb1, 0xaa,
	0x07, 0x85, 0xac, 0xa8, 0x3b, 0x19, 0x31, 0xa7, 0xf7, 0xae, 0xec, 0x0d, 0xb4, 0x2e, 0x50, 0x93,
	0x3e, 0xdb, 0xd4, 0xfd, 0xd9, 0x9c, 0xa2, 0xd3, 0x64, 0xc4, 0x9c, 0x72, 0xbb, 0xb2, 0x43, 0xd8,
	0xbd, 0x40, 0x6d, 0x9e, 0x8c, 0x0c, 0x58, 0xe3, 0xe5, 0x5c, 0xd5, 0x01, 0xb4, 0x4d, 0x9b, 0xc9,
	0x80, 0x35, 0x4a, 0xed, 0x4a, 0xde, 0x19, 0x3f, 0x93, 0x38, 0xeb, 0xd7, 0x88, 0x9e, 0x23, 0x9b,
	0x7b, 0x64, 0x01, 0xb0, 0xc9, 0x09, 0x21, 0xec, 0x59, 0x68, 0xa6, 0xc0, 0xea, 0x97, 0xa4, 0x3b,
	0x0b, 0x8f, 0x1c, 0x42, 0xfb, 0xfc, 0x27, 0x86, 0xa4, 0xc1, 0xbb, 0x9a, 0xb9, 0xb7, 0xf0, 0xc8,
	0x11, 0x74, 0x4f, 0xb4, 0xe6, 0xe1, 0xb7, 0xed, 0xba, 0xfb, 0xae, 0xfd, 0x0f, 0xfe, 0xf0, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x52, 0x63, 0xf2, 0x1f, 0x96, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MilpaClient is the client API for Milpa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MilpaClient interface {
	// Get Server Version.
	GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error)
	// Asks the server if it is the leader.
	IsLeader(ctx context.Context, in *IsLeaderRequest, opts ...grpc.CallOption) (*IsLeaderReply, error)
	// Create given resource on cloud backend.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*APIReply, error)
	// Update given resource on cloud backend.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*APIReply, error)
	// Get the given resource
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*APIReply, error)
	// Get the given resource
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*APIReply, error)
	// Get logs of a given pod.
	GetLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*APIReply, error)
	// Dump controller status.
	Dump(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*APIReply, error)
	// Deploy a Milpa package for a unit in a running pod.
	Deploy(ctx context.Context, opts ...grpc.CallOption) (Milpa_DeployClient, error)
	// Stream logs from a running pod
	StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (Milpa_StreamLogsClient, error)
	// Execute a command in the context of a unit
	Exec(ctx context.Context, opts ...grpc.CallOption) (Milpa_ExecClient, error)
	// Attach to stdin, stdout and stderr of a running pod
	Attach(ctx context.Context, opts ...grpc.CallOption) (Milpa_AttachClient, error)
}

type milpaClient struct {
	cc *grpc.ClientConn
}

func NewMilpaClient(cc *grpc.ClientConn) MilpaClient {
	return &milpaClient{cc}
}

func (c *milpaClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error) {
	out := new(VersionReply)
	err := c.cc.Invoke(ctx, "/Milpa/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpaClient) IsLeader(ctx context.Context, in *IsLeaderRequest, opts ...grpc.CallOption) (*IsLeaderReply, error) {
	out := new(IsLeaderReply)
	err := c.cc.Invoke(ctx, "/Milpa/IsLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpaClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*APIReply, error) {
	out := new(APIReply)
	err := c.cc.Invoke(ctx, "/Milpa/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpaClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*APIReply, error) {
	out := new(APIReply)
	err := c.cc.Invoke(ctx, "/Milpa/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpaClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*APIReply, error) {
	out := new(APIReply)
	err := c.cc.Invoke(ctx, "/Milpa/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpaClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*APIReply, error) {
	out := new(APIReply)
	err := c.cc.Invoke(ctx, "/Milpa/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpaClient) GetLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*APIReply, error) {
	out := new(APIReply)
	err := c.cc.Invoke(ctx, "/Milpa/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpaClient) Dump(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*APIReply, error) {
	out := new(APIReply)
	err := c.cc.Invoke(ctx, "/Milpa/Dump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpaClient) Deploy(ctx context.Context, opts ...grpc.CallOption) (Milpa_DeployClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Milpa_serviceDesc.Streams[0], "/Milpa/Deploy", opts...)
	if err != nil {
		return nil, err
	}
	x := &milpaDeployClient{stream}
	return x, nil
}

type Milpa_DeployClient interface {
	Send(*DeployRequest) error
	CloseAndRecv() (*APIReply, error)
	grpc.ClientStream
}

type milpaDeployClient struct {
	grpc.ClientStream
}

func (x *milpaDeployClient) Send(m *DeployRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *milpaDeployClient) CloseAndRecv() (*APIReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(APIReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *milpaClient) StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (Milpa_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Milpa_serviceDesc.Streams[1], "/Milpa/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &milpaStreamLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Milpa_StreamLogsClient interface {
	Recv() (*StreamMsg, error)
	grpc.ClientStream
}

type milpaStreamLogsClient struct {
	grpc.ClientStream
}

func (x *milpaStreamLogsClient) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *milpaClient) Exec(ctx context.Context, opts ...grpc.CallOption) (Milpa_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Milpa_serviceDesc.Streams[2], "/Milpa/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &milpaExecClient{stream}
	return x, nil
}

type Milpa_ExecClient interface {
	Send(*StreamMsg) error
	Recv() (*StreamMsg, error)
	grpc.ClientStream
}

type milpaExecClient struct {
	grpc.ClientStream
}

func (x *milpaExecClient) Send(m *StreamMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *milpaExecClient) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *milpaClient) Attach(ctx context.Context, opts ...grpc.CallOption) (Milpa_AttachClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Milpa_serviceDesc.Streams[3], "/Milpa/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &milpaAttachClient{stream}
	return x, nil
}

type Milpa_AttachClient interface {
	Send(*StreamMsg) error
	Recv() (*StreamMsg, error)
	grpc.ClientStream
}

type milpaAttachClient struct {
	grpc.ClientStream
}

func (x *milpaAttachClient) Send(m *StreamMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *milpaAttachClient) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MilpaServer is the server API for Milpa service.
type MilpaServer interface {
	// Get Server Version.
	GetVersion(context.Context, *VersionRequest) (*VersionReply, error)
	// Asks the server if it is the leader.
	IsLeader(context.Context, *IsLeaderRequest) (*IsLeaderReply, error)
	// Create given resource on cloud backend.
	Create(context.Context, *CreateRequest) (*APIReply, error)
	// Update given resource on cloud backend.
	Update(context.Context, *UpdateRequest) (*APIReply, error)
	// Get the given resource
	Get(context.Context, *GetRequest) (*APIReply, error)
	// Get the given resource
	Delete(context.Context, *DeleteRequest) (*APIReply, error)
	// Get logs of a given pod.
	GetLogs(context.Context, *LogsRequest) (*APIReply, error)
	// Dump controller status.
	Dump(context.Context, *DumpRequest) (*APIReply, error)
	// Deploy a Milpa package for a unit in a running pod.
	Deploy(Milpa_DeployServer) error
	// Stream logs from a running pod
	StreamLogs(*StreamLogsRequest, Milpa_StreamLogsServer) error
	// Execute a command in the context of a unit
	Exec(Milpa_ExecServer) error
	// Attach to stdin, stdout and stderr of a running pod
	Attach(Milpa_AttachServer) error
}

func RegisterMilpaServer(s *grpc.Server, srv MilpaServer) {
	s.RegisterService(&_Milpa_serviceDesc, srv)
}

func _Milpa_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpaServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Milpa/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpaServer).GetVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Milpa_IsLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpaServer).IsLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Milpa/IsLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpaServer).IsLeader(ctx, req.(*IsLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Milpa_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Milpa/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpaServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Milpa_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpaServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Milpa/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpaServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Milpa_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpaServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Milpa/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpaServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Milpa_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpaServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Milpa/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpaServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Milpa_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpaServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Milpa/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpaServer).GetLogs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Milpa_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpaServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Milpa/Dump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpaServer).Dump(ctx, req.(*DumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Milpa_Deploy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MilpaServer).Deploy(&milpaDeployServer{stream})
}

type Milpa_DeployServer interface {
	SendAndClose(*APIReply) error
	Recv() (*DeployRequest, error)
	grpc.ServerStream
}

type milpaDeployServer struct {
	grpc.ServerStream
}

func (x *milpaDeployServer) SendAndClose(m *APIReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *milpaDeployServer) Recv() (*DeployRequest, error) {
	m := new(DeployRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Milpa_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MilpaServer).StreamLogs(m, &milpaStreamLogsServer{stream})
}

type Milpa_StreamLogsServer interface {
	Send(*StreamMsg) error
	grpc.ServerStream
}

type milpaStreamLogsServer struct {
	grpc.ServerStream
}

func (x *milpaStreamLogsServer) Send(m *StreamMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Milpa_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MilpaServer).Exec(&milpaExecServer{stream})
}

type Milpa_ExecServer interface {
	Send(*StreamMsg) error
	Recv() (*StreamMsg, error)
	grpc.ServerStream
}

type milpaExecServer struct {
	grpc.ServerStream
}

func (x *milpaExecServer) Send(m *StreamMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *milpaExecServer) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Milpa_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MilpaServer).Attach(&milpaAttachServer{stream})
}

type Milpa_AttachServer interface {
	Send(*StreamMsg) error
	Recv() (*StreamMsg, error)
	grpc.ServerStream
}

type milpaAttachServer struct {
	grpc.ServerStream
}

func (x *milpaAttachServer) Send(m *StreamMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *milpaAttachServer) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Milpa_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Milpa",
	HandlerType: (*MilpaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Milpa_GetVersion_Handler,
		},
		{
			MethodName: "IsLeader",
			Handler:    _Milpa_IsLeader_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Milpa_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Milpa_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Milpa_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Milpa_Delete_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _Milpa_GetLogs_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _Milpa_Dump_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Deploy",
			Handler:       _Milpa_Deploy_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _Milpa_StreamLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Exec",
			Handler:       _Milpa_Exec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Attach",
			Handler:       _Milpa_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clientapi.proto",
}
