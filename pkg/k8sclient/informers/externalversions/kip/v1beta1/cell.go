/*
Copyright 2019 Elotl Inc.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	time "time"

	kipv1beta1 "github.com/elotl/kip/pkg/apis/kip/v1beta1"
	versioned "github.com/elotl/kip/pkg/k8sclient/clientset/versioned"
	internalinterfaces "github.com/elotl/kip/pkg/k8sclient/informers/externalversions/internalinterfaces"
	v1beta1 "github.com/elotl/kip/pkg/k8sclient/listers/kip/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// CellInformer provides access to a shared informer and lister for
// Cells.
type CellInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1beta1.CellLister
}

type cellInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewCellInformer constructs a new informer for Cell type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewCellInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredCellInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredCellInformer constructs a new informer for Cell type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredCellInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KiyotV1beta1().Cells().List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KiyotV1beta1().Cells().Watch(options)
			},
		},
		&kipv1beta1.Cell{},
		resyncPeriod,
		indexers,
	)
}

func (f *cellInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredCellInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *cellInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kipv1beta1.Cell{}, f.defaultInformer)
}

func (f *cellInformer) Lister() v1beta1.CellLister {
	return v1beta1.NewCellLister(f.Informer().GetIndexer())
}
